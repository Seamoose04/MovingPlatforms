<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="Lsd8coU7,THoF,Nh;.IR">i</variable><variable id="J.DFYEP%wq_J|KtQp[27">platforms</variable></variables><block type="pxt-on-start" id="w-?muiw!}?f+mn}%?ei)" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="HOh~]rDTfTa/]hlw-#LK" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let platforms: MovingPlatform[] = []" numlines="1" declaredvars="platforms"></mutation><next><block type="typescript_statement" id="Y^uU)YWAk#7c=O(VGDvS" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Platform {" line1="    width: number;" line2="    platform_image: Image;" line3="    background_image: Image;" line4="    constructor(_width: number, _platform_image: Image, _background_image: Image) {" line5="        this.width = _width;" line6="        this.platform_image = _platform_image;" line7="        this.background_image = _background_image;" line8="    }" line9="" line10="    /**" line11="        * Automatically creates platforms from your tilemap for future use." line12="        * @param platform_image The tile image of your platforms." line13="        * @param background_image The tile image of your background." line14="        * @param start_image Unused" line15="        * @param end_image Unused" line16="    */" line17="    static fromScene(platform_image: Image, background_image: Image, start_image?: Image, end_image?: Image) {" line18="        " line19="    }" line20="}" numlines="21"></mutation><next><block type="typescript_statement" id="W[#U^l=R)4RvTs)z=(dH" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class MovingPlatform extends Platform {" line1="    xMin: number;" line2="    xMax: number;" line3="    y: number;" line4="    lead: number;" line5="    dir: number = 1;" line6="    constructor(_xMin: number, _xMax: number, _width: number, _y: number, _platform_image: Image, _background_image: Image) {" line7="        super(_width, _platform_image, _background_image);" line8="        this.xMin = _xMin;" line9="        this.xMax = _xMax;" line10="        this.y = _y;" line11="" line12="        this.lead = this.xMin + this.width;" line13="" line14="        for (let j = this.xMin; j &lt; this.xMin + this.width; j++) {" line15="            tiles.setTileAt(tiles.getTileLocation(j, this.y), this.platform_image);" line16="            tiles.setWallAt(tiles.getTileLocation(j, this.y), true);" line17="        }" line18="    }" line19="    update(): void {" line20="        tiles.setTileAt(tiles.getTileLocation(this.lead, this.y), this.platform_image);" line21="        tiles.setWallAt(tiles.getTileLocation(this.lead, this.y), true);" line22="" line23="        tiles.setTileAt(tiles.getTileLocation(this.lead + (-this.dir * this.width), this.y), this.background_image);" line24="        tiles.setWallAt(tiles.getTileLocation(this.lead + (-this.dir * this.width), this.y), false);" line25="" line26="        this.lead += this.dir;" line27="" line28="        if (this.lead == this.xMin) {" line29="            this.dir = 1;" line30="            this.lead = this.xMin + this.width;" line31="        }" line32="        if (this.lead == this.xMax) {" line33="            this.dir = -1;" line34="            this.lead = this.xMax - this.width;" line35="        }" line36="    }" line37="    static fromScene(platform_image: Image, background_image: Image, start_image: Image, end_image: Image) {" line38="        let pTileX = 0;" line39="        let platform_tiles = tiles.getTilesByType(platform_image);" line40="        let start_tiles = tiles.getTilesByType(start_image);" line41="        let end_tiles = tiles.getTilesByType(end_image);" line42="" line43="        start_tiles.forEach(function (location: tiles.Location, index: number): void {" line44="            let col = location.col;" line45="            let xMin = col;" line46="            let y = location.row;" line47="            let width = 0;" line48="            while (tiles.tileImageAtLocation(tiles.getTileLocation(col, y)) !== platform_image) {" line49="                col++;" line50="            }" line51="            while (tiles.tileImageAtLocation(tiles.getTileLocation(col, y)) == platform_image) {" line52="                width++;" line53="                col++;" line54="            }" line55="            while (tiles.tileImageAtLocation(tiles.getTileLocation(col, y)) !== end_image) {" line56="                col++;" line57="            }" line58="            let xMax = col;" line59="            tiles.setTileAt(tiles.getTileLocation(col, location.row), background_image);" line60="            tiles.setTileAt(location, background_image);" line61="" line62="            platforms.push(new MovingPlatform(xMin, xMax, width, y, platform_image, background_image));" line63="        });" line64="    }" line65="}" numlines="66"></mutation></block></next></block></next></block></statement></block><block type="gameinterval" id="$9Y[|qv^Yqq4T+RMDMwp" x="1177" y="0"><value name="period"><shadow type="timePicker" id="GRmhS8rUtd5d?.Fg5ive"><field name="ms">300</field></shadow></value><statement name="HANDLER"><block type="pxt_controls_for" id="@%c{{!)q~BdXEQg}x0wa"><value name="VAR"><shadow type="variables_get_reporter" id="vzI`^g-}06Svw:QQ1t(t"><field name="VAR" id="Lsd8coU7,THoF,Nh;.IR">i</field></shadow></value><value name="TO"><shadow type="math_whole_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="C1_MoWUTF:XXdNdC|F.P"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="D{A$X(5YKL4=W!3lIp)O"><value name="VALUE"><block type="variables_get" id="c;/a~So1``%R%rPUq61K"><field name="VAR" id="J.DFYEP%wq_J|KtQp[27">platforms</field></block></value></block></value><value name="B"><shadow type="math_number" id="DWQrHMa:g!dSj3}7X8R8"><field name="NUM">1</field></shadow></value></block></value><statement name="DO"><block type="typescript_statement" id="[|B!tOiA#~5/*mu$NdDf" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="platforms[i].update();" numlines="1"></mutation></block></statement></block></statement></block></xml>